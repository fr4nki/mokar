const fs = require('fs');
const path = require('path');

const app = express()
const mocks = 'data/';

const urlPrefix = '/'
const endpointPrefix = (prefix) => prefix.endsWith('/') ? prefix : `${prefix}/`


const types = {
	'[ALL]': 'all',
	'[GET]': 'get',
	'[HEAD]': 'head',
	'[POST]': 'post',
	'[PUT]': 'put',
	'[DELETE]': 'delete',
	'[PATCH]': 'patch'
}
const typesList = Object.keys(types)
const typesDefault = '[ALL]'

app.use((req, res, next) => {
	console.log(`[${req.method}]: ${req.originalUrl}`)

	setTimeout(() => {
		next()
	}, 100)
})


const tmplBrackets = {
	start: '{',
	finish: '}'
}

const isRegexp = (regexp) => {
	const r = new RegExp(`/${regexp}/g`)
	return Object.prototype.toString.call(r) === '[object RegExp]'
}

const parseTmpl = (tmpl) => {
	const clearStr = tmpl.replace(tmplBrackets.start, '').replace(tmplBrackets.finish, '')
	const separated = clearStr.split('|')
	const type = separated[0]
	const hasDelimiter = separated.length > 1
	const limit = hasDelimiter ? separated[1].replace('-', ',') : ''

	console.log('-----', type)

	console.log('-----', hasDelimiter, separated)

	const postfix = hasDelimiter ? `{${limit}}` : ''

	console.log('----- postfix', postfix)

	let result = ''

	switch(type) {
		case 'any': {
			result = '[a-zA-Z0-9_-]';
			break;
		}

		case 'number': {
			result = '[0-9]';
			break;
		}

		case 'string': {
			result = '[a-zA-Z]';
			break;
		}

		case isRegexp: {
			result = type
			break;
		}

		default: {
			console.log('Check your filename. It does\'t fit schema.')
		}
	}

	console.log('result', result)

	if (hasDelimiter) {
		result += postfix
	} else{
		result += '+'
	}

	result = '('+result+')'

	if (result === '') {
		console.log('It seems you pass wrong type')
		return tmpl
	}

	return result
}


fs.readdir(mocks, (err, files) => {
	if (err) { console.log('Check your files') }

	files.forEach((name) => {
		let method = types[typesDefault]
		let nameNormalized = name.replace(/:/g, '/')

		typesList.forEach((type) => {
			if (nameNormalized.includes(type)) {
				nameNormalized = nameNormalized.replace(type, '')
				method = types[type]
			}
		})

		let filenameArr = nameNormalized.split('/')
		const filenameArrLast = filenameArr[filenameArr.length - 1]
		console.log('filenameArrLast', filenameArrLast)

		console.log('filenameArr', filenameArr)

		const filename = filenameArr.map((item) => {
			console.log('item', item)

			if (item.startsWith(tmplBrackets.start) && item.endsWith(tmplBrackets.finish)) {
				// TODO: There is should be try/catch
				return parseTmpl(item)
			}

			return item
		}).join('/')

		const endpoint_tmp = `${endpointPrefix(urlPrefix)}${filename.split('.json')[0]}`
		const endpoint = endpoint_tmp.replace(/(\/\/|\?)/g, '/')

		console.log('\n')
		console.log(endpoint)
		console.log('\n')
		console.log('\n')
		app[method](
			endpoint,
			(req, res) => {
				const text = fs.readFileSync(mocks + name);

				res.setHeader('Content-Type', 'application/json');
				res.end(String(text));
			}
		)
	})
})

app.listen('8890')
